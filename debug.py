"""
Script pour debugger ton mod√®le directement
Lance √ßa pour voir exactement ce que retourne ton mod√®le
"""
import joblib
import pickle
import numpy as np
from pathlib import Path

def test_model():
    model_path = Path("ml/obesity_model.pkl")
    
    if not model_path.exists():
        print("‚ùå Mod√®le non trouv√©!")
        return
    
    # Charge le mod√®le
    try:
        model = joblib.load(model_path)
        print("‚úÖ Mod√®le charg√© avec joblib")
    except:
        with open(model_path, 'rb') as f:
            model = pickle.load(f)
        print("‚úÖ Mod√®le charg√© avec pickle")
    
    print(f"Type de mod√®le: {type(model)}")
    
    # Test avec tes donn√©es
    test_data = [[25, 175, 70, 0]]  # Age, Height, Weight, history
    print(f"Donn√©es test: {test_data}")
    
    # Pr√©diction
    prediction = model.predict(test_data)
    probabilities = model.predict_proba(test_data)
    
    print(f"\nüéØ R√©sultats:")
    print(f"Pr√©diction: {prediction}")
    print(f"Type pr√©diction: {type(prediction[0])}")
    print(f"Probabilit√©s: {probabilities}")
    print(f"Shape probas: {probabilities.shape}")
    
    # V√©rifie les classes du mod√®le
    if hasattr(model, 'classes_'):
        print(f"Classes du mod√®le: {model.classes_}")
        print(f"Type classes: {type(model.classes_)}")
        
        # Mapping des classes
        for i, class_name in enumerate(model.classes_):
            print(f"Index {i}: {class_name} (proba: {probabilities[0][i]:.3f})")
    
    # Test direct d'indexation
    print(f"\nüß™ Tests d'indexation:")
    try:
        print(f"probabilities[0]: {probabilities[0]}")
        print(f"probabilities[0][0]: {probabilities[0][0]}")
        print(f"probabilities[0][1]: {probabilities[0][1]}")
        
        # Test avec la pr√©diction comme index
        pred_value = prediction[0]
        print(f"prediction[0]: {pred_value}")
        
        # Essaie d'utiliser la pr√©diction comme index
        try:
            result = probabilities[0][pred_value]
            print(f"‚ùå √áa ne devrait pas marcher: probabilities[0][{pred_value}] = {result}")
        except Exception as e:
            print(f"‚úÖ Erreur attendue: {e}")
        
    except Exception as e:
        print(f"Erreur: {e}")

if __name__ == "__main__":
    test_model()